#include "pch.h"
#include "../functions.h"


TEST(SubBytesTest, SubTest) {

	unsigned char state[16] = {
		0x00, 0x3c, 0x6e, 0x47,
		0x1f, 0x4e, 0x22, 0x74,
		0x0e, 0x08, 0x1b, 0x31,
		0x54, 0x59, 0x0b, 0x1a
	};

	SubBytes(state);

	unsigned char expected[16] = {
		0x63, 0xeb, 0x9f, 0xa0,
		0xc0, 0x2f, 0x93, 0x92,
		0xab, 0x30, 0xaf, 0xc7,
		0x20, 0xcb, 0x2b, 0xa2
	};


	for (int i = 0; i < 16; ++i) {
		EXPECT_TRUE(state[i] == expected[i]);
	}
}


TEST(ShiftRowTest, SRTest) {

	unsigned char state[16] = {
		0x63, 0xeb, 0x9f, 0xa0,
		0xc0, 0x2f, 0x93, 0x92,
		0xab, 0x30, 0xaf, 0xc7,
		0x20, 0xcb, 0x2b, 0xa2
	};

	ShiftRows(state);

	unsigned char expected[16] = {
		0x63, 0xeb, 0x9f, 0xa0,
		0x2f, 0x93, 0x92, 0xc0,
		0xaf, 0xc7, 0xab, 0x30,
		0xa2, 0x20, 0xcb, 0x2b
	};


	for (int i = 0; i < 16; ++i) {
		EXPECT_TRUE(state[i] == expected[i]);
	}
}

TEST(MixColumnTest, MixColumnTest) {

	unsigned char state[16] = {
		0x63, 0xeb, 0x9f, 0xa0,
		0x2f, 0x93, 0x92, 0xc0,
		0xaf, 0xc7, 0xab, 0x30,
		0xa2, 0x20, 0xcb, 0x2b
	};

	MixColumn(state);
	unsigned char expected[16] = {
		0xba, 0x84, 0xe8, 0x1b,
		0x75, 0xa4, 0x8d, 0x40,
		0xf4, 0x8d, 0x06, 0x7d,
		0x7a, 0x32, 0x0e, 0x5d
	};

	for (int i = 0; i < 16; ++i) {
		EXPECT_TRUE(state[i] == expected[i]);
	}
}

TEST(AddRoundKeyTest, AddRoundKey) {

	unsigned char state[16] = {
		0xba, 0x84, 0xe8, 0x1b,
		0x75, 0xa4, 0x8d, 0x40,
		0xf4, 0x8d, 0x06, 0x7d,
		0x7a, 0x32, 0x0e, 0x5d
	};

	unsigned char key[16] = {
		0xe2, 0x91, 0xb1, 0xd6,
		0x32, 0x12, 0x59, 0x79,
		0xfc, 0x91, 0xe4, 0xa2,
		0xf1, 0x88, 0xe6, 0x93
	};

	addRoundKey(state, key);

	unsigned char expected[16] = {
		0x58, 0x15, 0x59, 0xcd,
		0x47, 0xb6, 0xd4, 0x39,
		0x08, 0x1c, 0xe2, 0xdf,
		0x8b, 0xba, 0xe8, 0xce
	};

	for (int i = 0; i < 16; ++i) {
		EXPECT_TRUE(state[i] == expected[i]);
	}
}

TEST(ExpandKeyTest, ExpandKeyTest) {

	unsigned char key[16] = {
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
	};

	unsigned char expandedKey[176];
	KeyExpansion(key, expandedKey);

	unsigned char expected[176] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63,
		0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa,
		0x90, 0x97, 0x34, 0x50, 0x69, 0x6c, 0xcf, 0xfa, 0xf2, 0xf4, 0x57, 0x33, 0x0b, 0x0f, 0xac, 0x99,
		0xee, 0x06, 0xda, 0x7b, 0x87, 0x6a, 0x15, 0x81, 0x75, 0x9e, 0x42, 0xb2, 0x7e, 0x91, 0xee, 0x2b,
		0x7f, 0x2e, 0x2b, 0x88, 0xf8, 0x44, 0x3e, 0x09, 0x8d, 0xda, 0x7c, 0xbb, 0xf3, 0x4b, 0x92, 0x90,
		0xec, 0x61, 0x4b, 0x85, 0x14, 0x25, 0x75, 0x8c, 0x99, 0xff, 0x09, 0x37, 0x6a, 0xb4, 0x9b, 0xa7,
		0x21, 0x75, 0x17, 0x87, 0x35, 0x50, 0x62, 0x0b, 0xac, 0xaf, 0x6b, 0x3c, 0xc6, 0x1b, 0xf0, 0x9b,
		0x0e, 0xf9, 0x03, 0x33, 0x3b, 0xa9, 0x61, 0x38, 0x97, 0x06, 0x0a, 0x04, 0x51, 0x1d, 0xfa, 0x9f,
		0xb1, 0xd4, 0xd8, 0xe2, 0x8a, 0x7d, 0xb9, 0xda, 0x1d, 0x7b, 0xb3, 0xde, 0x4c, 0x66, 0x49, 0x41,
		0xb4, 0xef, 0x5b, 0xcb, 0x3e, 0x92, 0xe2, 0x11, 0x23, 0xe9, 0x51, 0xcf, 0x6f, 0x8f, 0x18, 0x8e
	};

	for (int i = 0; i < 176; ++i) {
		EXPECT_TRUE(expandedKey[i] == expected[i]);
	}
}

TEST(EncryptionTest, Encrypt) {

	const char* textStr = "Two One Nine Two";
	const char* keyStr = "Thats my Kung Fu";

	unsigned char plaintext[16];
	unsigned char cipherkey[16];
	unsigned char ciphertext[16];

	for (int i = 0; i < 16; ++i) {
		plaintext[i] = textStr[i];
		cipherkey[i] = keyStr[i];
	}

	Encrypt(plaintext, cipherkey, ciphertext);

	unsigned char expected[16] = {
		0x29, 0xc3, 0x50, 0x5f,
		0x57, 0x14, 0x20, 0xf6,
		0x40, 0x22, 0x99, 0xb3,
		0x1a, 0x02, 0xd7, 0x3a
	};

	for (int i = 0; i < 16; ++i) {
		EXPECT_TRUE(ciphertext[i] == expected[i]);
	}
}

TEST(ReverseByteSubstitution, ReverseSubstitionTest) {

	unsigned char state[16] = {
	0x63, 0xeb, 0x9f, 0xa0,
	0xc0, 0x2f, 0x93, 0x92,
	0xab, 0x30, 0xaf, 0xc7,
	0x20, 0xcb, 0x2b, 0xa2
	};

	InvSubBytes(state);

	unsigned char expected[16] = {
		0x00, 0x3c, 0x6e, 0x47,
		0x1f, 0x4e, 0x22, 0x74,
		0x0e, 0x08, 0x1b, 0x31,
		0x54, 0x59, 0x0b, 0x1a
	};

	for (int i = 0; i < 16; ++i) {
		EXPECT_TRUE(state[i] == expected[i]);
	}
}

TEST(ReverseShiftRows, ReverseShiftRowsTest) {

	unsigned char state[16] = {
		0x63, 0xeb, 0x9f, 0xa0,
		0x2f, 0x93, 0x92, 0xc0,
		0xaf, 0xc7, 0xab, 0x30,
		0xa2, 0x20, 0xcb, 0x2b
	};

	InvShiftRows(state);

	unsigned char expected[16] = {
	0x63, 0xeb, 0x9f, 0xa0,
	0xc0, 0x2f, 0x93, 0x92,
	0xab, 0x30, 0xaf, 0xc7,
	0x20, 0xcb, 0x2b, 0xa2
	};

	for (int i = 0; i < 16; ++i) {
		EXPECT_TRUE(state[i] == expected[i]);
	}
}

TEST(ReverseMixColumns, ReverseMixColumnsTest) {

	unsigned char state[16] = {
		0xba, 0x84, 0xe8, 0x1b,
		0x75, 0xa4, 0x8d, 0x40,
		0xf4, 0x8d, 0x06, 0x7d,
		0x7a, 0x32, 0x0e, 0x5d
	};

	InvMixColumn(state);

	unsigned char expected[16] = {
		0x63, 0xeb, 0x9f, 0xa0,
		0x2f, 0x93, 0x92, 0xc0,
		0xaf, 0xc7, 0xab, 0x30,
		0xa2, 0x20, 0xcb, 0x2b
	};

	for (int i = 0; i < 16; ++i) {
		EXPECT_TRUE(state[i] == expected[i]);
	}
}

TEST(DecrpytTest, Decryption) {

	const char* expectedStr = "Two One Nine Two";
	const char* keyStr = "Thats my Kung Fu";

	unsigned char plaintext[16];

	unsigned char expected[16];
	unsigned char cipherkey[16];

	unsigned char ciphertext[16] = {
		0x29, 0xc3, 0x50, 0x5f,
		0x57, 0x14, 0x20, 0xf6,
		0x40, 0x22, 0x99, 0xb3,
		0x1a, 0x02, 0xd7, 0x3a
	};

	for (int i = 0; i < 16; ++i) {
		expected[i] = expectedStr[i];
		cipherkey[i] = keyStr[i];
	}

	Decrypt(ciphertext, cipherkey, plaintext);

	for (int i = 0; i < 16; ++i) {
		EXPECT_TRUE(plaintext[i] == expected[i]);
	}
}
